import org.apache.tools.ant.taskdefs.condition.Os
apply plugin: 'com.android.model.application'

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def ndkDir = properties.getProperty('ndk.dir')
def valLayerSrc = "${ndkDir}/sources/third_party/vulkan/src"

model {
    android {
        compileSdkVersion = "android-N"
        buildToolsVersion = "23.0.2"

        defaultConfig {
            applicationId = "com.vulkan.tutorials.two"
            minSdkVersion.apiLevel = 22
            targetSdkVersion.apiLevel = 24
            versionCode = 1
            versionName = "0.0.1"
        }
        ndk {
            moduleName = "vktuts"
            toolchain = "clang"
            stl = "gnustl_static"
            ldLibs.addAll(["log", "android"])
            cppFlags.addAll(["-Werror", "-std=c++11",
                             "-DUSE_DEBUG_EXTENTIONS",
                             "-D VK_USE_PLATFORM_ANDROID_KHR"])
            cppFlags.addAll(["-I" + file("src/main/jni"),
                             "-I" + "${valLayerSrc}/include",
                             "-I" + file("../../common/vulkan_wrapper")])

            abiFilters.addAll(["armeabi-v7a", 'arm64-v8a', 'x86', 'x86_64'])

        }
        sources {
            main {
                jni {
                    dependencies {
                        project ":nativeactivity" linkage "static"
                    }
                    source {
                        srcDir '../../common/vulkan_wrapper'
                    }
                }
            }
        }
        buildTypes {
            release {
                ndk.with {
                    debuggable = true
                }
                minifyEnabled = false
                proguardFiles.add(file('proguard-rules.pro'))
            }
        }
    }
}
// ******** Adding validation layers into build *******
// Build layers if necessary: works for non-windows Host
// For windows host, a couple extra steps must be done before build this project
//   ndk-r12 ( or better ) command path exceed 260 character limit:
//       to workaround it, copy your ndk to a place with shorter path like
//           c:\ndk-r12
//       and point your local.properties file's ndk.dir to the new location
def ndkBuildCmd = "${ndkDir}/ndk-build"
if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    ndkBuildCmd = "${ndkDir}/ndk-build.cmd"
}
task(buildLayers, type : Exec) {
    workingDir(valLayerSrc + "/build-android")
    commandLine "${ndkBuildCmd}", 'NDK_PROJECT_PATH=.', '-j', '8'
}

// Copy the validation layers
task(copyValidationLayers, type: Copy) {
    from "${valLayerSrc}/build-android/libs"
    into 'src/main/jniLibs'
}

tasks.whenTaskAdded { task ->
    if (task.name.contains('compile')) {
        task.dependsOn buildLayers
        task.dependsOn copyValidationLayers
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':nativeactivity')
}
